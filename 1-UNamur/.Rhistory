main = "Répartition du non-sens dans l'échantillon",
xlab = "IMC",
ylab = "Frequence",
breaks = c(0,16,20:25,28),
)
hist(data$nonsense,
main = "Répartition du non-sens dans l'échantillon",
xlab = "IMC",
ylab = "Frequence",
breaks = c(0:16,20:25,28),
)
hist(data$nonsense,
main = "Répartition du non-sens dans l'échantillon",
xlab = "IMC",
ylab = "Frequence",
breaks = c(0:16,20:25,50),
)
hist(data$nonsense,
main = "Répartition du non-sens dans l'échantillon",
xlab = "IMC",
ylab = "Frequence",
breaks = 3,
)
hist(data$nonsense,
breaks = 5,
)
data
boxplot(data$poids ~ data$machine)
boxplot(data$poids ~ data$machine, horizontal = TRUE)
barplot(table.moy, ylab="IMC",
beside = TRUE, # barres affichées côte à côte au lieu de mpilées
legend=TRUE, # afffiche al légende
)
# 3.6 Légendes
colo <- c(grey(0.25), grey(0.75))
barplot(table.moy, ylab="IMC",
col=colo,
)
legend("topleft", fill=colo)
barplot(mat, ylab="IMC",
col=colo,
)
legend("topleft", fill=colo)
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=colo,
ylim=c(0,10)
)
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=colo,
)
legend("topleft", fill=colo)
legend("topleft", legend = c("Étiquette 1", "Étiquette 2"), fill=colo)
# 3.6 Légendes
colo <- c(grey(0.05), grey(0.75))
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=colo,
)
legend("topleft", legend = c("Étiquette 1", "Étiquette 2"), fill=colo)
# 3.6 Légendes
colo <- c(grey(0.05), grey(0.85))
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=colo,
)
legend("topleft", legend = c("Étiquette 1", "Étiquette 2"), fill=colo)
legend("topleft",
legend = c("Étiquette 1", "Étiquette 2"),
fill=colo,
title="Légende",
)
legend("topleft",
legend = c("Étiquette 1", "Étiquette 2"),
fill=colo,
title="Légende",
box.lty = 0.0
)
legend("topleft",
legend = c("Étiquette 1", "Étiquette 2"),
fill=colo,
title="Légende",
box.lty = 0.0 # suppr bordures
)
# 3.7
length(colors())
head(colors(),2)
boxplot(data$poids ~ data$machine, col="blue")
barplot(mat, col = blue)
barplot(mat, col = blue)
barplot(mat, col = "blue")
barplot(moy.reg, col = blue)
barplot(moy.reg, col = "blue")
barplot(moy.reg, col.lab = "blue") # couleur des titres
barplot(moy.reg, col.lab = "blue", ylab = "test") # couleur des titres
barplot(moy.reg, col.axis = "blue") # couleur des colonnes
barplot(moy.reg, border = "blue") # couleur des colonnes
barplot(moy.reg, col.axis = "blue") # couleur des colonnes
barplot(moy.reg, border = "blue") # couleur des bordures des colonnes
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=colo,
)
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=c("Red", "Blue"),
)
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=c("#ff9966", "Blue"),
)
barplot(mat,
beside=T,
ylab="Titre axe Y",
col=c(grey(0.5), grey(1)),
)
# 3.5
boxplot(data$poids ~ data$machine) # ~ signifie "en fonction de"
# 3.4
hist(data$nonsense)
barplot(moy.reg, ylab="IMC")
pie(GenreProp, labels=c("Femmes", "Hommes")) # <!> Ordre des labels !!!
plot(df$Age, df$Taille, #données
main="Taille des individus en fonction de leur âge", # Titre pricipal du graphique
xlab="Age (ans)", #Légende axe X
ylab="Taille (cm)", # Légende Axe Y
xlim = c(0,80), # étendue de l'axe X
ylim = c(150,190), # étendue de l'axe Y
bty="n", # encadrement du graphique ("n" => pas encadré)
)
plot(df$Taille)
plot(as.factor(df$Genre), df$Taille) # diagramme boxplot (boîtes à moustache)
plot(x,y,ylim=c(0,max(y)+2))
plot(df$Taille, df$Age) # diagramme de dispersion
plot(df$Taille, df$Age) # diagramme de dispersion
plot(df$Taille, df$Age, main="Titre du graphique") # diagramme de dispersion
plot(df$Taille, df$Age, main="Titre du graphique", xlab="Axe abscisses", ylab="Axe ordonnées") # diagramme de dispersion
plot(df$Taille, df$Age,
main="Titre du graphique",
xlab="Axe abscisses", ylab="Axe ordonnées",
las=0)
plot(df$Taille, df$Age,
xlab="Axe abscisses", ylab="Axe ordonnées",
las=0) # Graduations parallèles à leur axe
plot(df$Taille, df$Age,
las=0) # Graduations parallèles à leur axe
plot(df$Taille, las=0) # Graduations parallèles à leur axe
xlab="Axe abscisses", ylab="Axe ordonnées",
plot(df$Taille, df$Age,
xlab="Axe abscisses", ylab="Axe ordonnées",
las=0) # Graduations parallèles à leur axe
plot(df$Taille, df$Age, las=0) # Graduations parallèles à leur axe
plot(df$Taille, df$Age, las=1) # Graduations parallèles à leur axe
plot(df$Taille, df$Age, las=0) # Graduations parallèles à leur axe
plot(df$Taille, df$Age, las=1) # Graduations parallèles à leur axe
plot(df$Taille, df$Age, las=2) # Texte parallèle à l'axe x
plot(df$Taille, df$Age, las=1) # Texte parallèle à l'axe x
plot(df$Taille, df$Age, las=3) # Texte parallèle à l'axe x
plot(df$Taille, df$Age, las=2) # Texte parallèle à l'axe x
plot(df$Taille, df$Age, las=3) # Texte parallèle à l'axe y
plot(df$Taille, df$Age, cex.axis=0) # Texte parallèle à l'axe y
plot(df$Taille, df$Age, cex.axis=0.8) # Texte parallèle à l'axe y
plot(df$Taille, df$Age, cex.axis=0.4) # Texte parallèle à l'axe y
plot(df$Taille, df$Age, cex.labs=0.4) # Taille du texte pour les noms des axes
plot(df$Taille, df$Age, cex.lab=0.4) # Taille du texte pour les noms des axes
plot(df$Taille, df$Age, title="titre graphique", cex.main=0.4) # Taille du texte pour les noms des axes
plot(df$Taille, df$Age, main="titre graphique", cex.main=0.4) # Taille du texte pour les noms des axes
plot(df$Taille, df$Age, cex=0.4) # Taille du texte pour les noms des axes
plot(df$Taille, df$Age, cex=0.4) # Taille des points du graphique
plot(df$Taille, df$Age, main="titre graphique", cex.main=0.4) # Taille du texte pour le titre du graphique
plot(df$Taille, df$Age, pch=20) # Taille des points du graphique
plot(df$Taille, df$Age, pch=40) # Taille des points du graphique
plot(df$Taille, df$Age, pch=30) # Taille des points du graphique
plot(df$Taille, df$Age, pch=20) # Taille des points du graphique
plot(df$Taille, df$Age, pch=10) # Taille des points du graphique
plot(df$Taille, df$Age, pch=00) # Taille des points du graphique
plot(df$Taille, df$Age, pch=5) # Taille des points du graphique
plot(df$Taille, df$Age, pch=6) # Taille des points du graphique
df
head(data)
data
# Diviser les données par la colonne 'machine'
subsets <- split(data, data$machine)
# Afficher les données associées à la machine 1
subsets[[1]]
breaks <- seq(50, 110, by=10)
ylim <- c(0,50)
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
breaks <- seq(0, 50, by=10)
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
subsets <- split(data, dat$machine)
# Diviser les données par la colonne 'machine'
subsets <- split(data, dat$machine)
# Diviser les données par la colonne 'machine'
subsets <- split(data, data$machine)
subsets[[1]]
breaks <- seq(0, 50, by=10)
ylim <- c(0,50)
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
breaks <- seq(40, 50, by=1)
ylim <- c(0,50)
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
breaks <- seq(45, 46, by=0.1)
ylim <- c(0,50)
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
par(mfrow=c(3,1))
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
par(mfrow=c(3,1))
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
par(mfrow=c(2,2))
for (i in 1:length(subsets)) {
hist(subsets[[i]]$poids,
breaks=breaks,
main=paste("Histogramme - Machine", i),
xlab="Poids (kg)",
ylab="Fréquence",
ylim = ylim
)
}
layout(matrix(c(1,2,3,3), nrow = 2, ncol = 2, byrow = TRUE))
barplot(tapply(data$poids, data$nonsense, mean), ylim=c(0,100))
barplot(tapply(data$machine, data$nonsense, mean), ylim=c(0,100))
plot(data$poids, data$nonsense)
layout(matrix(c(1,2,3,3), nrow = 2, ncol = 2, byrow = TRUE))
barplot(tapply(data$poids, data$machine, mean), ylim=c(0,100))
barplot(tapply(data$nonsense, data$machine, mean), ylim=c(0,100))
plot(data$poids, data$nonsense)
pdf("capsule43.pdf")
layout(matrix(c(1,2,3,3), nrow = 2, ncol = 2, byrow = TRUE))
barplot(tapply(data$poids, data$machine, mean), ylim=c(0,100))
barplot(tapply(data$nonsense, data$machine, mean), ylim=c(0,100))
plot(data$poids, data$nonsense)
dev.off()
plot(data$poids)
text(100,200,"Ceci est un texte")
par(mfrow=1)
par(mfrow=c(1,1))
plot(data$poids)
text(100,200,"Ceci est un texte")
text(100,200,"Ceci est un texte")
plot(data$poids)
par(mfrow=c(1,1))
text(100,200,"Ceci est un texte")
plot(data$poids)
par(mfrow=c(1,1))
plot(data$poids)
text(100,200,"Ceci est un texte")
text(0,0,"Ceci est un texte")
text(10,10,"Ceci est un texte")
text(120,110,"Ceci est un texte", xpd=TRUE)
par(mar=c(5,4,4,2))
plot(data$poids, data$nonsense)
text(120,110,"Ceci est un texte", xpd=TRUE)
# ??? Marche pas
par(mar=c(5,4,4,2))
plot(data$poids, data$nonsense)
text(120,110,"Ceci est un texte", xpd=TRUE)
regime
diet
airquality
# 5.2 Histogramme
library(gdata)
data("diet")
data(diet)
data2<-read.csv(file.choose(), 1)
data2$gender
data2
data2$gender<-rep(c(rep("homme",20), rep("femme", 30)),3)
data2
data2$gender<-rep(c(rep("homme",20), rep("femme", 30)),3)
diet<-read.csv(file.choose(), 1) # diet.csv
diet
# data2$gender<-rep(c(rep("homme",20), rep("femme", 30)),3)
diet$regime[which(data$regime=="A")]<-"Régime 1"
# data2$gender<-rep(c(rep("homme",20), rep("femme", 30)),3)
diet$regime[which(data$diet.type=="A")]<-"Régime 1"
# data2$gender<-rep(c(rep("homme",20), rep("femme", 30)),3)
diet$regime[which(diet$diet.type=="A")]<-"Régime 1"
diet
# data2$gender<-rep(c(rep("homme",20), rep("femme", 30)),3)
diet$diet.type[which(diet$diet.type=="A")]<-"Régime 1"
diet$diet.type[which(diet$diet.type=="B")]<-"Régime 2"
diet$diet.type[which(diet$diet.type=="C")]<-"Régime 3"
diet
library(ggplot2)
ggplot(data = diet, aes(x = final.weight))
ggplot(data = diet, aes(x = final.weight))+
geom_histogram(binwidth = 10)
ggplot(data = diet, aes(x = final.weight))+
geom_histogram(binwidth = 10)+
facet_grid(regime~.)
ggplot(data = diet, aes(x = final.weight))+
geom_histogram(binwidth = 10)+
facet_grid(diet.type~.)
ggplot(data = diet, aes(x = final.weight))+
geom_histogram(binwidth = 10)+
facet_grid(.~diet.type)
ggplot(data = diet, aes(x = final.weight))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)
ggplot(data = diet, aes(x = final.weight, fill=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)
ggplot(data = diet, aes(x = final.weight, fill=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_fill_manual(values = c("pink", "green"))
ggplot(data = diet, aes(x = final.weight, fill=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_fill_manual(values = c("red", "green"))
ggplot(data=diet, aes(x=final.weight, y=height))+
geom_point()
ggplot(data=diet, aes(x=final.weight, y=height))+
geom_point()+
facet_grid(.~diet.type)
ggplot(data=diet, aes(x=final.weight, y=height))+
geom_point()+
facet_grid(gender~diet.type)
ggplot(data=diet, aes(x=final.weight, y=height))+
geom_point()+
facet_grid(.~diet.type)
ggplot(data=diet, aes(x=final.weight, y=height, colour = sexe))+
geom_point()+
facet_grid(.~diet.type)
ggplot(data=diet, aes(x=final.weight, y=height, colour = gender))+
geom_point()+
facet_grid(.~diet.type)
ggplot(data=diet, aes(x=final.weight, y=height, colour = gender))+
geom_point()+
facet_grid(.~diet.type)+
scale_colour_manual(values=c("red", "green"))
ggplot(data=diet, aes(x=final.weight, y=height, colour = gender))+
geom_point()+
facet_grid(.~diet.type)+
scale_colour_manual(values=c("red", "darkgreen"))
ggplot(data=diet, aes(x=final.weight, y=height, colour = gender))+
geom_point()+
facet_grid(.~diet.type)+
scale_colour_manual(values=c("red", "green"))
ggplot(data=diet, aes(x=final.weight, y=height, colour = gender))+
geom_point()+
facet_grid(.~diet.type)+
scale_colour_manual(values=c("red", "green"))+
labs(title = "Graph title", x= "Masse (kg)", y = "Taille (cm)")+
theme_bw()
ggplot(data=diet, aes(x=final.weight, y=height, colour = gender))+
geom_point()+
facet_grid(.~diet.type)+
scale_colour_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))+
labs(title = "Graph title", x= "Masse (kg)", y = "Taille (cm)")+
theme_bw()
ggplot(data=diet, aes(x=final.weight, y=height, colour = gender))+
geom_point()+
facet_grid(.~diet.type)+
scale_colour_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))+
labs(title = "Graph title", x= "Masse (kg)", y = "Taille (cm)")+
theme_bw()+theme(legend.position = "bottom")
ggplot(data = diet, aes(x = final.weight, colour=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_colour_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))+
x
ggplot(data = diet, aes(x = final.weight, colour=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_colour_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))
ggplot(data = diet, aes(x = final.weight, colour=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_fill_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))
ggplot(data = diet, aes(x = final.weight, fill=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_fill_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))
ggplot(data = diet, aes(x = final.weight, fill=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_fill_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))+
labs(title="Histogramme", x= "Masse (kg)", y = "Fréquence")
ggplot(data = diet, aes(x = final.weight, fill=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_fill_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))+
labs(title="Histogramme", x= "Masse (kg)", y = "Fréquence")+
theme_classic()
ggplot(data = diet, aes(x = final.weight, fill=gender))+
geom_histogram(binwidth = 10)+
facet_grid(gender~diet.type)+
scale_fill_manual(values=c("red", "green"), name = "Sexe", label=c("Femme", "Homme"))+
labs(title="Histogramme", x= "Masse (kg)", y = "Fréquence")+
theme_classic()+
theme(legend.position = "bottom")
ggsave("out/graphChap5.pdf", width = 10, height = 10)
freqrel <- function(freq){freq/sum(freq)*100}
# 6.1 Functions
a<-c(5,4,9,7,4)
freqrel <- function(freq){freq/sum(freq)*100}
freqrel(a)
freqrel <- function(freq){
freq/sum(freq)*100
barplot(vfreqrel, ylab="Fréquences relatives (%)", las=1)
}
freqrel(a)
vfreqrel<-freq/sum(freq)*100
freqrel <- function(freq){
vfreqrel<-freq/sum(freq)*100
barplot(vfreqrel, ylab="Fréquences relatives (%)", las=1)
}
freqrel(a)
CotesCharles<-c(8,17,14)
CotesCharles
if(mean(CotesCharles) < 10) {"Echec"} else {"Réussite"}
CotesJustine<-c(4,11,7)
CotesJustine
if(mean(CotesJustine) < 10) {"Echec"} else {"Réussite"}
# ifelse s'applique aux vecteurs
df
df$Resultat<-ifelse(df$Age<50, "Jeune", "Agé")
df
for (i in 1:3) 2*i -> k
resultat<-rep(NA,3) # NA: valeur manquante
for (i in 1:3) 2*i -> resultat[i]
resultat
